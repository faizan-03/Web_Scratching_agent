from fpdf import FPDF
import os
import re
from datetime import datetime

class PDF(FPDF):    
    def __init__(self):
        super().__init__()
        self.section_titles = []
        self.section_links = []
        self.set_auto_page_break(auto=True, margin=20)
        self.font_family = "Times"
        self.logo_path = "/assets/uog.png"

        self.primary_blue = (25, 25, 112)
        self.light_blue = (173, 216, 230)
        self.accent_blue = (70, 130, 180)
        self.text_dark = (40, 40, 40)
        self.border_color = (100, 149, 237)

    def header(self):
        if self.page_no() > 2:
            self.set_draw_color(*self.border_color)
            self.set_line_width(0.8)
            self.rect(10, 10, 190, 277)

            if self.logo_path and os.path.exists(self.logo_path):
                self.image(self.logo_path, x=15, y=14, w=12)

            self.set_font(self.font_family, "I", 11)
            self.set_text_color(*self.accent_blue)
            self.set_xy(130, 15)
            self.cell(0, 8, f"Thesis Assistant | Page {self.page_no()}", align="R")
            self.ln(10)

    def footer(self):
        pass

    def add_cover(self, topic):
        self.add_page()
        self.set_fill_color(*self.light_blue)
        self.rect(0, 0, 210, 297, 'F')
        self.set_draw_color(*self.primary_blue)
        self.set_line_width(2)
        self.rect(15, 15, 180, 267)
        self.set_line_width(0.5)
        self.rect(25, 25, 160, 247)

        if self.logo_path and os.path.exists(self.logo_path):
            self.image(self.logo_path, x=75, y=35, w=60)

        self.set_y(110)
        self.set_font(self.font_family, 'B', 32)
        self.set_text_color(*self.primary_blue)
        self.cell(0, 25, "Thesis Report", ln=True, align="C")

        self.set_draw_color(*self.accent_blue)
        self.set_line_width(1)
        self.line(60, 140, 150, 140)

        self.ln(10)
        self.set_font(self.font_family, 'B', 18)
        self.set_text_color(*self.text_dark)
        self.cell(0, 12, f"Topic: {topic}", ln=True, align="C")

        self.ln(20)
        self.set_font(self.font_family, 'I', 14)
        self.set_text_color(*self.accent_blue)
        self.cell(0, 10, "Generated by Thesis Assistant", ln=True, align="C")
        self.cell(0, 10, f"Date: {datetime.now().strftime('%B %d, %Y')}", ln=True, align="C")

    def add_table_of_contents(self):
        self.add_page()
        self.set_fill_color(245, 248, 255)
        self.rect(0, 0, 210, 297, 'F')
        self.set_draw_color(*self.border_color)
        self.set_line_width(1.5)
        self.rect(15, 15, 180, 267)
        self.set_xy(15, 30)
        self.set_fill_color(*self.light_blue)
        self.set_font(self.font_family, 'B', 24)
        self.set_text_color(*self.primary_blue)
        self.cell(180, 20, "Table of Contents", ln=True, align="C", fill=True)

        self.set_draw_color(*self.accent_blue)
        self.set_line_width(0.8)
        self.line(25, 55, 185, 55)

        self.ln(15)
        self.set_font(self.font_family, '', 13)
        self.set_text_color(*self.text_dark)

        for i, ((title, page), link) in enumerate(zip(self.section_titles, self.section_links)):
            fill_color = (250, 250, 255) if i % 2 == 0 else (255, 255, 255)
            self.set_fill_color(*fill_color)
            self.set_x(25)
            self.cell(140, 10, title, border=0, ln=0, fill=True)
            self.cell(20, 10, str(page), border=0, ln=1, align="R", link=link, fill=True)

    def add_section(self, title, content):
        if not content or not content.strip():
            content = "Content is being processed and will be available soon."

        self.add_page()
        link = self.add_link()
        self.section_titles.append((title, self.page_no()))
        self.section_links.append(link)
        self.set_link(link, y=0, page=self.page_no())

        self.set_fill_color(*self.light_blue)
        self.set_text_color(*self.primary_blue)
        self.rect(0, 0, 210, 297, 'F')
        self.set_draw_color(*self.border_color)
        self.set_draw_color(*self.accent_blue)
        self.set_line_width(0.8)
        self.set_font(self.font_family, "B", 16)
        self.set_x(15)
        self.cell(180, 12, title, ln=True, fill=True, border=1, link=link)
        self.ln(8)

        self.set_font(self.font_family, '', 12)
        self.set_text_color(*self.text_dark)

        lines = content.strip().split('\n')
        for line in lines:
            line = line.strip()
            if not line:
                self.ln(2)
                continue
            if line.startswith(('•', '-', '*')) or re.match(r'^\d+\.', line):
                self.set_x(20)
                self.multi_cell(170, 7, line)
            elif line.isupper() and len(line) < 50:
                self.ln(3)
                self.set_font(self.font_family, 'B', 13)
                self.set_text_color(*self.accent_blue)
                self.set_x(15)
                self.multi_cell(180, 8, line)
                self.set_text_color(*self.text_dark)
                self.set_font(self.font_family, '', 12)
                self.ln(1)
            else:
                self.set_x(15)
                self.multi_cell(180, 7, line)
                self.ln(1)

def sanitize_text_for_pdf(text):
    if not text:
        return text
    replacements = {
        '’': "'", '‘': "'", '“': '"', '”': '"',
        '–': '-', '—': '--', '…': '...', ' ': ' ',
        '•': '•', '‐': '-', '‑': '-', '‒': '-',
        '«': '<<', '»': '>>', '‹': '<', '›': '>',
        '‚': ',', '„': ',,', '†': '+', '‡': '++',
        '‰': '%', '′': "'", '″': '"', '‴': "'''",
    }
    for unicode_char, replacement in replacements.items():
        text = text.replace(unicode_char, replacement)
    try:
        return text.encode('latin-1', errors='replace').decode('latin-1')
    except Exception:
        return ''.join(char if ord(char) < 256 else '?' for char in text)

def save_report_as_pdf(topic, full_text):
    topic = sanitize_text_for_pdf(topic)
    if not full_text or len(full_text.strip()) == 0:
        full_text = """
1. Introduction
===============
This report is currently being generated.

2. Research Overview
====================
Research data is being compiled.

3. Methodology
==============
Methodology will be included.

4. Findings
===========
Findings will be presented here.

5. Conclusion
=============
Final thoughts will be added.
"""

    pdf = PDF()
    base_dir = os.path.dirname(os.path.abspath(__file__))
    pdf.logo_path = os.path.join(base_dir, "..", "assets", "uog.png")

    pdf.add_cover(topic)

    sections = re.split(r"\n\n?(\d+\.\s.+)\n[=\-]{3,}\n", full_text)
    if len(sections) <= 1:
        sections = re.split(r"\n\n?(\d+\.\s.+)\n", full_text)
        if len(sections) <= 1:
            paragraphs = [p.strip() for p in full_text.split('\n\n') if p.strip()]
            sections = []
            for i, para in enumerate(paragraphs[:5], 1):
                sections.extend([f"{i}. Section {i}", para])

    valid_sections = []
    for i in range(1, len(sections), 2):
        if i + 1 < len(sections):
            title = sanitize_text_for_pdf(sections[i].strip())
            content = sanitize_text_for_pdf(sections[i + 1].strip())
            if title and content:
                valid_sections.append((title, content))
                pdf.add_section(title, content)

    if not valid_sections:
        pdf.add_section("Report Content", "Content is being processed. Please check back for updates.")

    pdf.add_table_of_contents()

    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    safe_topic = re.sub(r'\W+', '_', topic.lower())
    filename = f"{safe_topic}_report_{timestamp}.pdf"
    output_dir = "reports"
    os.makedirs(output_dir, exist_ok=True)
    filepath = os.path.join(output_dir, filename)
    pdf.output(filepath)
    return filename